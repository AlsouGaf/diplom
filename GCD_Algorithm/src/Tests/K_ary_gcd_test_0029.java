package Tests;

import static org.junit.Assert.*;

import java.math.BigInteger;

import main.K_ary_alg;

import org.junit.Test;

public class K_ary_gcd_test_0029 {


	@Test
	public void test00() {
		String sU = "263";
		String sV = "151";
		
		BigInteger u = new BigInteger(sU);
		BigInteger v = new BigInteger(sV);
		
		int k = 29;		
		
		BigInteger r = K_ary_alg.gcd(u, v, k);
		
		//assertTrue(r.equals(a.gcd(b)));
		assertEquals("1", r.toString()); 
	}
	
	@Test
	public void test10() {
		String sU = "25";
		String sV = "5";
		
		BigInteger u = new BigInteger(sU);
		BigInteger v = new BigInteger(sV);
		
		int k = 29;		
		
		BigInteger r = K_ary_alg.gcd(u, v, k);
		
		//assertTrue(r.equals(a.gcd(b)));
		assertEquals("5", r.toString()); 
	}
	
	@Test
	public void test11() {
		String sU = "125";
		String sV = "25";
		
		BigInteger u = new BigInteger(sU);
		BigInteger v = new BigInteger(sV);
		
		int k = 29;		
		
		BigInteger r = K_ary_alg.gcd(u, v, k);
		
		//assertTrue(r.equals(a.gcd(b)));
		assertEquals("25", r.toString()); 
	}
	
	@Test
	public void test12() {
		String sU = "106";
		String sV = "71";
		
		BigInteger u = new BigInteger(sU);
		BigInteger v = new BigInteger(sV);
		
		int k = 29;		
		
		BigInteger r = K_ary_alg.gcd(u, v, k);
		
		//assertTrue(r.equals(a.gcd(b)));
		assertEquals("1", r.toString()); 
	}
	
	
	@Test
	public void test01() {
		String sU = "59862147";
		String sV = "58962";
		
		
		BigInteger u = new BigInteger(sU);
		BigInteger v = new BigInteger(sV);
		
		int k = 29;	
		
		BigInteger r = K_ary_alg.gcd(u, v, k);
		
		assertTrue(r.equals(u.gcd(v)));

	}
	
	@Test
	public void test02() {
		String sU = "59860002147";
		String sV = "165258962";
		
		
		BigInteger u = new BigInteger(sU);
		BigInteger v = new BigInteger(sV);
		
		int k = 29;	

		BigInteger r = K_ary_alg.gcd(u, v, k);
		
		assertTrue(r.equals(u.gcd(v)));

	}
	
	@Test
	public void test03() {
		String sU = "59860596002147";
		String sV = "216532258962";
		
		
		BigInteger u = new BigInteger(sU);
		BigInteger v = new BigInteger(sV);
		
		int k = 29;	

		BigInteger r = K_ary_alg.gcd(u, v, k);
		
		assertTrue(r.equals(u.gcd(v)));

	}
	
	@Test
	public void test04() {
		String sU = "598605960021405987";
		String sV = "216532258962025";
		
		
		BigInteger u = new BigInteger(sU);
		BigInteger v = new BigInteger(sV);
		
		int k = 29;	

		BigInteger r = K_ary_alg.gcd(u, v, k);
		
		assertTrue(r.equals(u.gcd(v)));

	}

	@Test
	public void test05() {
		String sU = "152";
		String sV = "74";
		
		
		BigInteger u = new BigInteger(sU);
		BigInteger v = new BigInteger(sV);
		
		int k = 29;	

		BigInteger r = K_ary_alg.gcd(u, v, k);
		
		assertTrue(r.equals(u.gcd(v)));

	}
	
	@Test
	public void test06() {
		String sU = "235730056490598605960021405987";
		String sV = "12165326104258962034525";
		
		
		BigInteger u = new BigInteger(sU);
		BigInteger v = new BigInteger(sV);
		
		int k = 29;	

		BigInteger r = K_ary_alg.gcd(u, v, k);
		
		assertTrue(r.equals(u.gcd(v)));

	}
	
	@Test
	public void test07() {
		String sU = "452349823709487095679454243235730056490598605960021405987";
		String sV = "121049387520526795793472049365326104258962034525";
		
		
		BigInteger u = new BigInteger(sU);
		BigInteger v = new BigInteger(sV);
		
		int k = 29;	

		BigInteger r = K_ary_alg.gcd(u, v, k);
		
		assertTrue(r.equals(u.gcd(v)));

	}
	
	@Test
	public void test08() {
		String sU = "7864121344523498233463456000239857034570348709487095679454243235730056490598605960021405987";
		String sV = "121435345240985693879047496703948049387520526795793472049365326104258962034525";
		
		
		BigInteger u = new BigInteger(sU);
		BigInteger v = new BigInteger(sV);
		
		int k = 29;	

		BigInteger r = K_ary_alg.gcd(u, v, k);
		
		assertTrue(r.equals(u.gcd(v)));
	}
	
	@Test
	public void test09() {
		String sU = "934968770234570394867049768049568497864121344523498233463456000239857034570348709487095679454243235730056490598605960021405987";
		String sV = "1214353452463094760298476048700985693879047496703948049387520526795793472049365326104258962034525";
		
		
		BigInteger u = new BigInteger(sU);
		BigInteger v = new BigInteger(sV);
		
		int k = 29;	

		BigInteger r = K_ary_alg.gcd(u, v, k);
		
		assertTrue(r.equals(u.gcd(v)));
	}
	
	@Test
	public void test13() {
		String s
		String s
		
		
		BigInteger u = new BigInteger(sU);
		BigInteger v = new BigInteger(sV);
		
		int k = 29;	

		BigInteger r = K_ary_alg.gcd(u, v, k);
		
		assertTrue(r.equals(u.gcd(v)));
	}


}
